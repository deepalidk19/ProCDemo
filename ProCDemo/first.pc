#pragma warning(disable : 4996)
exec sql begin declare section;
char user_name[20],password[20];
exec sql end declare section;
exec sql include sqlca;
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include <string.h>
/*system/or@cl321c*/

#define MAX_USERNAME     31
#define MAX_SERVICENAME 128

typedef char asciiz[MAX_USERNAME]; 

EXEC SQL TYPE asciiz IS CHARZ(MAX_USERNAME) REFERENCE; 
EXEC SQL BEGIN DECLARE SECTION;
char data[50];
EXEC SQL END DECLARE SECTION;


struct emp_info 
{ 
    asciiz     emp_name; 
    float      salary; 
    float      commission; 
}; 

void sql_error(msg) 
    char *msg;
{ 
    
    

	
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    printf("\n%s\n", msg);

/* Call sqlglm() to get the complete text of the
 * error message.
 */
    //buf_len = sizeof (err_msg);
    //sqlglm((unsigned char *) err_msg, &buf_len, &msg_len);
    printf("ERROR");

    EXEC SQL ROLLBACK RELEASE;
    exit(EXIT_FAILURE);
} 

void main () {


     
	//-------------------------------------
	// login
	//-------------------------------------
	strcpy(user_name, "system");
	strcpy(password, "or@cl321c");
  	exec sql connect:user_name identified by :password;
	if (sqlca.sqlcode==0) {
		printf("success");
	}
	else {
		printf("Error code:%d\nError message:%s",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
	}

	//-------------------------------
	// code to insert a row
	//------------------------------
	//EXEC SQL INSERT INTO TEST (NAME) VALUES ('Deepali');
	//EXEC SQL COMMIT WORK RELEASE;


	//-------------------------------
	// declare cursor
	//------------------------------
	EXEC SQL DECLARE salespeople CURSOR FOR 
    SELECT ENAME 
    FROM EMP 
    WHERE JOB LIKE 'SALES%'; 
	EXEC SQL OPEN salespeople;
	EXEC SQL WHENEVER NOT FOUND DO break;

     //----------------------------
     // declare emp
     //---------------------------
    struct emp_info *emp_rec_ptr; 
    if ((emp_rec_ptr = 
        (struct emp_info *) malloc(sizeof(struct emp_info))) == 0)
    { 
        printf("Memory allocation error.\n"); 
        exit(EXIT_FAILURE); 
    } 

    //------------------------------
    // fetch cursor
    //-----------------------------
	 for (;;) 
    { 
        EXEC SQL FETCH salespeople INTO :data; 
        printf("%s data", data);

        //printf("%-11s %9.2f %11.2f\n", emp_rec_ptr->emp_name, 
        //        emp_rec_ptr->salary, emp_rec_ptr->commission); 
    } 
 

    //----------------------------
    // close
    //----------------------------
    EXEC SQL CLOSE salespeople; 
 
    printf("\nArrivederci.\n\n");

    EXEC SQL COMMIT WORK RELEASE; 
    exit(EXIT_SUCCESS); 
	_getch();
}